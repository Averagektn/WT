-- This script was generated by the ERD tool in pgAdmin 4.
-- Please log an issue at https://redmine.postgresql.org/projects/pgadmin4/issues/new if you find any bugs, including reproduction steps.
BEGIN;


CREATE TABLE IF NOT EXISTS public."user"
(
    usr_id integer NOT NULL GENERATED ALWAYS AS IDENTITY ( INCREMENT 1 ),
    usr_login character varying(40) NOT NULL,
    usr_password character varying(128) NOT NULL,
    usr_phone character varying(15) NOT NULL,
    usr_email character varying(254) NOT NULL,
    usr_first_name character varying(255) NOT NULL,
    usr_surname character varying(255) NOT NULL,
    usr_patronymic character varying(255),
    usr_ban boolean NOT NULL DEFAULT false,
    usr_banned_by integer,
    CONSTRAINT pk_user PRIMARY KEY (usr_id)
);

COMMENT ON TABLE public."user"
    IS 'Guest of the store';

CREATE TABLE IF NOT EXISTS public.admin
(
    adm_id integer NOT NULL GENERATED ALWAYS AS IDENTITY ( INCREMENT 1 ),
    adm_login character varying(40) NOT NULL,
    adm_password character varying(128) NOT NULL,
    CONSTRAINT pk_admin PRIMARY KEY (adm_id),
    CONSTRAINT uq_id UNIQUE (adm_id)
);

COMMENT ON TABLE public.admin
    IS 'Administrator';

CREATE TABLE IF NOT EXISTS public.product
(
    prd_id integer NOT NULL GENERATED ALWAYS AS IDENTITY ( INCREMENT 1 ),
    prd_name character varying(255) NOT NULL,
    prd_description text,
    prd_price money NOT NULL,
    prd_quantity integer NOT NULL DEFAULT 0,
    prd_feedback integer,
    CONSTRAINT pk_product PRIMARY KEY (prd_id),
    CONSTRAINT uq_product_feedback UNIQUE (prd_feedback)
);

CREATE TABLE IF NOT EXISTS public."order"
(
    ord_id integer NOT NULL GENERATED ALWAYS AS IDENTITY ( INCREMENT 1 ),
    ord_usr_id integer NOT NULL,
    ord_date date NOT NULL DEFAULT CURRENT_TIMESTAMP,
    ord_sum money NOT NULL,
    ord_feedback integer,
    CONSTRAINT pk_order PRIMARY KEY (ord_id),
    CONSTRAINT uq_order_feedback UNIQUE (ord_feedback)
);

CREATE TABLE IF NOT EXISTS public.address
(
    adr_id integer NOT NULL,
    adr_city character varying(80) NOT NULL,
    adr_street character varying(80) NOT NULL,
    adr_home smallint NOT NULL,
    adr_floor smallint NOT NULL DEFAULT 1,
    adr_apartment smallint NOT NULL DEFAULT 1,
    adr_entrance smallint NOT NULL DEFAULT 1,
    CONSTRAINT pk_address PRIMARY KEY (adr_id)
);

CREATE TABLE IF NOT EXISTS public.discount
(
    dsc_id integer NOT NULL GENERATED ALWAYS AS IDENTITY ( INCREMENT 1 ),
    dsc_prd integer NOT NULL,
    dsc_percent smallint NOT NULL GENERATED ALWAYS AS IDENTITY ( MINVALUE 1 MAXVALUE 100 ),
    dsc_start date NOT NULL,
    dsc_over date NOT NULL,
    CONSTRAINT pk_discount PRIMARY KEY (dsc_id),
    CONSTRAINT uq_product UNIQUE (dsc_prd)
);

CREATE TABLE IF NOT EXISTS public.order_feedback
(
    ofb_id integer NOT NULL GENERATED ALWAYS AS IDENTITY ( INCREMENT 1 ),
    ofb_review text,
    ofb_rating smallint NOT NULL GENERATED ALWAYS AS IDENTITY ( MINVALUE 1 MAXVALUE 10 ),
    CONSTRAINT pk_order_feedback PRIMARY KEY (ofb_id)
);

CREATE TABLE IF NOT EXISTS public.product_feedback
(
    pfb_id integer NOT NULL GENERATED ALWAYS AS IDENTITY ( INCREMENT 1 ),
    pfb_review text,
    pfb_rating smallint NOT NULL GENERATED ALWAYS AS IDENTITY ( MINVALUE 1 MAXVALUE 10 ),
    CONSTRAINT pk_product_feedback PRIMARY KEY (pfb_id)
);

CREATE TABLE IF NOT EXISTS public.order_product
(
    order_ord_id integer NOT NULL GENERATED ALWAYS AS IDENTITY ( INCREMENT 1 ),
    product_prd_id integer NOT NULL GENERATED ALWAYS AS IDENTITY ( INCREMENT 1 )
);

CREATE TABLE IF NOT EXISTS public.coupon
(
    cpn_id integer NOT NULL GENERATED ALWAYS AS IDENTITY ( INCREMENT 1 ),
    cpn_sum money NOT NULL,
    cpn_start date NOT NULL,
    cpn_over date NOT NULL,
    CONSTRAINT pk_coupon PRIMARY KEY (cpn_id)
);

CREATE TABLE IF NOT EXISTS public.coupon_user
(
    coupon_cpn_id integer NOT NULL GENERATED ALWAYS AS IDENTITY ( INCREMENT 1 ),
    user_usr_id integer NOT NULL GENERATED ALWAYS AS IDENTITY ( INCREMENT 1 )
);

CREATE TABLE IF NOT EXISTS public.address_user
(
    address_adr_id integer NOT NULL,
    user_usr_id integer NOT NULL GENERATED ALWAYS AS IDENTITY ( INCREMENT 1 )
);

ALTER TABLE IF EXISTS public."user"
    ADD FOREIGN KEY (usr_banned_by)
    REFERENCES public.admin (adm_id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION
    NOT VALID;


ALTER TABLE IF EXISTS public."order"
    ADD FOREIGN KEY (ord_usr_id)
    REFERENCES public."user" (usr_id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION
    NOT VALID;


ALTER TABLE IF EXISTS public.discount
    ADD CONSTRAINT fk_product FOREIGN KEY (dsc_prd)
    REFERENCES public.product (prd_id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION
    NOT VALID;


ALTER TABLE IF EXISTS public.order_feedback
    ADD FOREIGN KEY (ofb_id)
    REFERENCES public."order" (ord_feedback) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION
    NOT VALID;


ALTER TABLE IF EXISTS public.product_feedback
    ADD CONSTRAINT fk_product FOREIGN KEY (pfb_id)
    REFERENCES public.product (prd_feedback) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION
    NOT VALID;


ALTER TABLE IF EXISTS public.order_product
    ADD CONSTRAINT fk_order FOREIGN KEY (order_ord_id)
    REFERENCES public."order" (ord_id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION
    NOT VALID;


ALTER TABLE IF EXISTS public.order_product
    ADD CONSTRAINT fk_product FOREIGN KEY (product_prd_id)
    REFERENCES public.product (prd_id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION
    NOT VALID;


ALTER TABLE IF EXISTS public.coupon_user
    ADD CONSTRAINT fk_coupon FOREIGN KEY (coupon_cpn_id)
    REFERENCES public.coupon (cpn_id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION
    NOT VALID;


ALTER TABLE IF EXISTS public.coupon_user
    ADD CONSTRAINT fk_user FOREIGN KEY (user_usr_id)
    REFERENCES public."user" (usr_id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION
    NOT VALID;


ALTER TABLE IF EXISTS public.address_user
    ADD FOREIGN KEY (address_adr_id)
    REFERENCES public.address (adr_id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION
    NOT VALID;


ALTER TABLE IF EXISTS public.address_user
    ADD FOREIGN KEY (user_usr_id)
    REFERENCES public."user" (usr_id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION
    NOT VALID;

END;